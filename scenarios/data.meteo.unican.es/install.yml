- name: Install tomcats
  hosts: servers
  vars:
    tomcat_ssl_keystoreFile: "{{ tomcat_home }}/server.p12"
    tomcat_ssl_keystorePass: coches1
  vars_files:
    - secrets.yml
  roles:
    - role: tomcat
  tasks:
    - name: Copy keystore
      copy: src=../../server.p12 dest={{ tomcat_ssl_keystoreFile }}

    - name: Unarchive derbydb client
      unarchive:
        src: "{{ derby_tgz }}"
        dest: "{{ tomcat_home }}/lib"
        exclude:
          - derby.war
          - README.htm
        extra_opts:
          - --strip-components=2

# Tomcats
    - name: Deploy catalina bases
      include_role:
        name: tomcat_base
      with_items: "{{ tomcats }}"
      loop_control:
        loop_var: tomcat

    - name: Template setenv.sh
      template: src=templates/setenv.sh.j2 dest={{ tomcat_bases }}/{{ item.name }}/bin/setenv.sh
      with_items: "{{ tomcats }}"

    - name: Template server.xml
      template: src=templates/server.xml.j2 dest={{ tomcat_bases }}/{{ item.name }}/conf/server.xml
      with_items: "{{ tomcats }}"

# TDS
    - name: Deploy TDSs
      include_role:
        name: tds
      vars:
        tds_home: "{{ tomcat_bases }}/{{ item.name }}/webapps/{{ tds_context }}"
        tds_sslPort: 443
        tds_useSSL: True
      with_items: "{{ tomcats }}"

    - name: Create content/thredds
      file: state=directory path={{ tomcat_bases }}/{{ item.name }}/content/thredds
      with_items: "{{ tomcats }}"

    - name: Create common catalog and ncml directories
      file: state=directory path={{ root }}/{{ item }} mode=0775
      with_items: [catalogs, public]

    - name: Copy threddsConfig.xml
      copy: src=files/threddsConfig.xml dest={{ tomcat_bases }}/{{ item.name }}/content/thredds/threddsConfig.xml
      with_items: "{{ tomcats }}"

    - name: Clone tds-content repository
      run_once: True
      local_action:
        module: git
        repo: git@gitlab.com:scds/tds-content.git
        dest: tds-content

    - name: Synchronize tds-content
      run_once: True
      synchronize: src=tds-content dest={{ root }}

    - name: Find directory catalogs
      find: paths={{ root }}/tds-content file_type=directory recurse=no
      register: catalog_result

    - name: Symlink tds-content
      file:
        state: link
        src: "{{ item.1.path }}"
        path: "{{ tomcat_bases }}/{{ item.0.name }}/content/thredds/{{ item.1.path|basename }}"
      with_nested:
        - "{{ tomcats }}"
        - "{{ catalog_result.files }}"

    - name: Symlink catalogs
      file: state=link src={{ root }}/tds-content/catalogs path={{ tomcat_bases }}/{{ item.name }}/content/thredds/catalogs
      with_items: "{{ tomcats }}"

    - name: Symlink ncmls
      file: state=link src={{ root }}/tds-content/public path={{ tomcat_bases }}/{{ item.name }}/content/thredds/public
      with_items: "{{ tomcats }}"

# Melody
    - name: Install jrobin
      copy: src={{ jrobin_jar }} dest={{ tomcat_bases }}/{{ item.name }}/webapps/{{ tds_context }}/WEB-INF/lib/
      with_items: "{{ tomcats }}"

    - name: Install java melody
      copy: src={{ melody_jar }} dest={{ tomcat_bases }}/{{ item.name }}/webapps/{{ tds_context }}/WEB-INF/lib/
      with_items: "{{ tomcats }}"

# TAP
    - name: Create tap directory
      file: state=directory path={{ tomcat_bases }}/{{ item.name }}/webapps/udg-tap
      with_items: "{{ tomcats }}"

    - name: Unarchive tap
      unarchive: src=../../software/udg-tap.war dest={{ tomcat_bases }}/{{ item.name }}/webapps/udg-tap
      with_items: "{{ tomcats }}"

    - name: Template tap properties
      template: >
        src=templates/tap.properties.j2
        dest={{ tomcat_bases }}/{{ item.name }}/webapps/udg-tap/WEB-INF/classes/global_variables.properties
      with_items: "{{ tomcats }}"

    - name: Copy context.xml
      copy: src=files/context.xml dest={{ tomcat_bases }}/{{ item.name }}/conf/context.xml
      with_items: "{{ tomcats }}"

- name: Install load balancer
  hosts: lb
  vars:
    hostcert: /etc/pki/tls/certs/hostcert.pem
    hostkey: /etc/pki/tls/private/hostkey.pem
    clusters:
      - name: default
        urls: [/thredds, /udg-tap]
  tasks:
    - name: Install httpd
      yum: name=httpd,mod_ssl state=present

    - name: Copy httpd conf
      copy: src=files/httpd.conf dest=/etc/httpd/conf/httpd.conf
      tags: update-workers

    - name: Template modproxy.conf
      template: src=templates/modproxy.conf.j2 dest=/etc/httpd/conf.d/modproxy.conf
      tags: update-workers

- name: Install workers
  hosts: servers
  serial: True
  tags: update-workers
  vars:
    workers:
    - gateway: lb
      cluster: default
      properties: loadfactor=1 route={{ ansible_hostname }}
  tasks:
    - name: Add tomcat as a modproxy worker
      blockinfile:
        path: /etc/httpd/conf.d/modproxy.conf
        insertafter: <Proxy "balancer://{{ item.cluster }}">
        marker: "# {mark} {{ item.cluster }}://{{ ansible_all_ipv4_addresses[0] }}:9009"
        block: |
          BalancerMember "ajp://{{ ansible_all_ipv4_addresses[0] }}:9009" {{ item.properties }}
      delegate_to: "{{ item.gateway }}"
      with_items: "{{ workers }}"

- name: Install derbydb
  hosts: databases
  vars:
    derby_tgz: db-derby-10.14.2.0-bin.tar.gz
  tasks:
    - name: Create {{ derby_home }} directory
      file: state=directory path={{ derby_home }}

    - name: Unarchive derbydb
      unarchive: >
        src=../../software/{{ derby_tgz }}
        dest={{ derby_home }}
        extra_opts=--strip-components=1

    - name: Template derby.properties
      template: src=templates/derby.properties.j2 dest={{ derby_home }}/derby.properties
