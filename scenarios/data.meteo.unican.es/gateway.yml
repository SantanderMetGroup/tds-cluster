- name: Install gateway
  hosts: lb
  vars:
    hostcert: /etc/pki/tls/certs/hostcert.pem
    hostkey: /etc/pki/tls/private/hostkey.pem
    versions:
      installer: 4.0.0-alpha1
      java: jdk1.8.0_192
      search: v4.17.10
      stats_api: v1.0.9
      node_manager: v1.0.5
      node_manager_db: 0.1.7
      orp: v2.11.0
      security: v2.8.11
      security_db: 0.1.7
      idp: v2.8.8
    assets:
      base: https://github.com/ESGF/esgf-ansible/releases/download/{{ versions.installer }}
      search: https://github.com/ESGF/esg-search/releases/download/{{ versions.search }}
      stats_api: https://github.com/ESGF/esgf-stats-api/releases/download/{{ versions.stats_api }}
      node_manager: https://github.com/ESGF/esgf-node-manager/releases/download/{{ versions.node_manager }}
      orp: https://github.com/ESGF/esg-orp/releases/download/{{ versions.orp }}
      security: https://github.com/ESGF/esgf-security/releases/download/{{ versions.security }}
      idp: https://github.com/ESGF/esgf-idp/releases/download/{{ versions.idp }}
    solr:
      src: http://archive.apache.org/dist/lucene/solr/6.6.6/solr-6.6.6.zip
      root_dir: solr-6.6.6
      path: /usr/local/solr
      home: /usr/local/solr-home
      shards:
        - name: master
          port: 8984
          args: "-Denable.master=true"
        - name: slave
          port: 8983
          args: "-Denable.slave=true"
  vars_files:
    - secrets.yml
  roles:
    - role: esgfdb
    - role: esgfindex
  tasks:
    - name: Create directories
      file: state=directory dest={{ item }}
      with_items:
        - /etc/httpd/conf
        - /etc/httpd/conf.d

    - name: Copy httpd conf
      copy: src={{ httpd_conf_src }} dest=/etc/httpd/conf/httpd.conf

    - name: Copy httpd ssl conf
      copy: src={{ httpd_sslconf_src }} dest=/etc/httpd/conf/httpd.ssl.conf

    - name: Template modproxy.conf
      template: src=templates/modproxy.conf.j2 dest={{ modproxy_conf }}

    - name: Create /etc/certs
      file: state=directory path=/etc/certs mode=0755

    - name: Copy hostkey
      copy: src={{ certs }}/hostkey.pem dest=/etc/certs/hostkey.pem mode=0400

    - name: Copy hostcert
      copy: src={{ certs }}/hostcert.pem dest=/etc/certs/hostcert.pem mode=0644

    - name: Copy cachain
      copy: src={{ certs }}/cachain.pem dest=/etc/certs/cachain.pem mode=0644

    - name: Copy esgf ca bundle
      copy: src={{ certs }}/esgf-ca-bundle.crt dest=/etc/certs/esgf-ca-bundle.crt

    # Filebeat
    - name: Copy filebeat config
      copy: src=files/filebeat/{{ item }} dest=/etc/filebeat/ mode=0600
      with_items: [ "filebeat.yml", "esgf-cas.crt", "cert.pem" ]

    # Need to clone on gateway to be able to run esgpublish
    - name: Clone tds-content
      run_once: True
      local_action:
        module: git
        repo: git@gitlab.com:SCDS/tds-content.git
        dest: esgf-content
        version: esgf
        depth: 1

    - name: Synchronize esgf-content
      synchronize: src=esgf-content/ dest={{ esg.content }}/thredds

    - name: start solr shards
      become: yes
      become_user: solr
      command: "{{ solr.path }}/bin/solr start -s {{ solr.home }}/{{ shard.name }}-{{ shard.port }} -p {{ shard.port }} -a {{ shard.args }} -Ddisable.configEdit=true -Dsolr.disable.shardsWhitelist=true"
      loop: "{{ solr.shards }}"
      register: result
      changed_when: '"Port {{ shard.port }} is already being used" not in result.stdout'
      failed_when: 'result.rc != 0 and "Port {{ shard.port }} is already being used" not in result.stdout'
      loop_control:
        loop_var: shard

- name: Workers
  hosts: servers
  tasks:
    - lineinfile:
        path: "{{ modproxy_conf }}"
        insertafter: <Proxy "balancer://{{ item }}">
        line: BalancerMember "ajp://{{ ansible_all_ipv4_addresses[0] }}:{{ tomcats[item].ajp }}" loadfactor=1 route={{ ansible_hostname }}
      delegate_to: lb
      with_items: [ 'udg', 'esgf', 'tds5' ]
      when: 'inventory_file|basename != "spock"'

    - lineinfile:
        path: "{{ modproxy_conf }}"
        insertafter: <Proxy "balancer://{{ item }}">
        line: BalancerMember "ajp://{{ ansible_all_ipv4_addresses[1] }}:{{ tomcats[item].ajp }}" loadfactor=1 route={{ ansible_hostname }}
      delegate_to: lb
      with_items: [ 'udg', 'esgf', 'tds5' ]
      when: 'inventory_file|basename == "spock"'
